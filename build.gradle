plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "7.1.0"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri('https://hub.spigotmc.org/nexus/content/repositories/snapshots/')
    }
    maven {
        url = uri('https://oss.sonatype.org/content/groups/public/')
    }
    maven {
        url = uri('https://repo.codemc.org/repository/maven-public/')
    }
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    maven {
        url = uri('https://jitpack.io')
    }
    maven {
        url = uri('https://redempt.dev')
    }
    maven {
        url = uri('https://repo.aikar.co/content/groups/aikar/')
    }
    maven {
        url = uri('https://repo.extendedclip.com/content/repositories/placeholderapi/')
    }
}

dependencies {
    implementation 'de.tr7zw:item-nbt-api:2.9.2'
    implementation 'com.github.Redempt:RedLib:6.5.2'
    implementation 'com.github.cryptomorin:XSeries:8.8.0'
    implementation 'co.aikar:acf-paper:0.5.1-SNAPSHOT'

    compileOnly 'org.spigotmc:spigot-api:1.14.4-R0.1-SNAPSHOT'
    compileOnly 'org.jetbrains:annotations:23.0.0'
    compileOnly 'me.clip:placeholderapi:2.11.1'
}

group = 'me.byteful.plugin'
version = '1.2.7'
description = 'LevelTools'
java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
            artifact shadowJar
        }
    }
}

shadowJar {
    minimize()
    archiveBaseName.set("LevelTools")
    archiveClassifier.set("")

    relocate "de.tr7zw.changeme.nbtapi", "me.byteful.plugin.leveltools.libs.nbtapi"
    relocate "com.cryptomorin.xseries", "me.byteful.plugin.leveltools.libs.xseries"
    relocate "redempt.redlib", "me.byteful.plugin.leveltools.libs.redlib"
    relocate 'co.aikar.commands', 'me.byteful.plugin.leveltools.libs.aikar.acf'
    relocate 'co.aikar.locales', 'me.byteful.plugin.leveltools.libs.aikar.locales'
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('*.yml') {
        expand props
    }
}

compileJava {
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.forkOptions.executable = 'javac'
}
